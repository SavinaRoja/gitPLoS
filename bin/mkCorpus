#! /usr/bin/env python
'''
   Author: Bill OConnor 
   Description: Command line tools for PLoS search API

   The Public Library of Science (PLoS) publishes peer 
   reviewed research under the Creative Commons license. 
   All articles are available to the public free of charge. 
   Info regarding the RESTful web API to the PLoS Solr based 
   search engine is available at http://api.plos.org. 
   
   This is a collection of python modules and commandline 
   tools to aid in using this api. 

   License: http://www.opensource.org/licenses/mit-license.php

'''
# Commandline parser setupgitPLoS.search.plosquery
import json
from os import mkdir
from datetime import datetime 
from optparse import OptionParser 
from gitPLoS.search.query import Query, mkJrnlQuery
from gitPLoS.nltk.corpus.builder import Builder, ReturnFields

usage = "usage: %prog [optionS] query1 query2 ..."
parser = OptionParser(usage=usage)

parser.add_option('-n', '--name', action='store', dest='name', default='myCorpus',
		 help='Name of corpus. Default is "myCorpus". Creates a directory ' +
		 'and puts all files related to the corpus there.')
parser.add_option('-j', '--journal', 
                 action='store', dest='jrnl', default=None,
                 help='Default journal is "all". One of more journals can be specified ' + \
                 'comma separated identifier list. [pone,pbio,pmed,pgen,pcbi,pntd,ppat].' )
parser.add_option('-l', '--limit', 
                 action='store', dest='limit', type='int', default=99,
                 help='Maximum number of documents to return. default=99' )
parser.add_option("-v", "--verbose", 
                 action='store_true', dest='verbose', default=False,
                 help='Verbose mode for debugging.' ) 
parser.add_option('-a', '--api-key',
                 action='store', dest='api_key', default='7Jne3TIPu6DqFCK',
                 help='API key obtained from PLoS.' ) 
	
(opts, args) = parser.parse_args()
	
# Parse the journal options and add them to the query
# Journal name are logically OR'd 
if opts.jrnl is not None:
    args.append(mkJrnlQuery(opts.jrnl.split(',')))
    
# if no argument specified, wildcard search '*:*'
if len(args) == 0:
   args = args + ['*:*']

# Corpus directory
mkdir(opts.name)

# Setup and execute the query
plos_q = Query( api_key=opts.api_key, limit=opts.limit, verbose=opts.verbose )
plos_q.query(args, ReturnFields)
fields = ReturnFields.split(',')

corpus_info = {}
corpus_info['creation_date'] = datetime.now().isoformat() 
file_list = []
corpus_info['file_list'] = file_list
corpus_info['name'] = opts.name

# The wuery is iterable 
b = Builder()
for doc in plos_q:
    corpus_entry = b.build( doc )
    fn = corpus_entry['id'].replace('/','-') + '.json'
    fd = open( opts.name + '/' + fn, 'w')
    json.dump( doc, fd, indent=5 )
    print 'Added : ' + fn
    fd.close()
    file_list.append(fn)

corpus_info['stop_words'] = b.stop_words
corpus_info['query'] = args

fd = open( opts.name + '/corpus_info.json', 'w')
json.dump( corpus_info, fd, indent=5 )
fd.close()

